{
  "name": "com.unity.entities",
  "displayName": "Entities",
  "version": "1.0.0-pre.65",
  "unity": "2022.2",
  "unityRelease": "2f1",
  "dependencies": {
    "com.unity.burst": "1.8.3",
    "com.unity.serialization": "3.0.0-pre.1",
    "com.unity.collections": "2.1.0-pre.18",
    "com.unity.mathematics": "1.2.6",
    "com.unity.modules.assetbundle": "1.0.0",
    "com.unity.modules.audio": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.nuget.mono-cecil": "1.11.4",
    "com.unity.scriptablebuildpipeline": "1.20.2",
    "com.unity.profiling.core": "1.0.2"
  },
  "description": "The Entities package provides a modern Entity Component System (ECS) implementation with a basic set of systems and components made for Unity.",
  "keywords": [
    "entities",
    "dots",
    "unity"
  ],
  "_upm": {
    "changelog": "### Added\n\n* Added support for automatic data mode switching to the Entities Hierarchy window and the Inspector window.\n* Added BlobAsset safety check for passing blob assets into methods without using `ref`.\n* Added the `LocalTransform.ComputeWorldTransformMatrix()` which synchronously computes an entity's world-space transform matrix, in the rare cases where an accurate world transform is needed in simulation code and is otherwise be unavailable.\n* Added `RefRW<T> SystemAPI.GetComponentRW<T>(Entity,bool)`\n* Bulk SetComponentEnabled operations on EntityManager: `EntityManager.SetComponentEnabled<T>(EntityQuery, bool)` and `EntityManager.SetComponentEnabled(EntityQuery, ComponentType, bool)`.\n* A `Unity.Transforms.Helpers` class with assorted transform-related helper functions:\n  * A simple `float4x4` extension methods for field extraction, such as `.Up()`, `.Forward()` and `.Translation()`\n  * Added utilities to apply a transformation matrix to a `float3` point or direction, or to a `quaternion` rotation\n  * A method to synchronously compute an entity's world-space transform, `.ComputeWorldTransformMatrix()`\n  * A method to compute the \"LookAt\" `quaternion` rotation for a position that would cause its \"forward\" direction to point towards some target.\n* `TypeIndex.IsChunkSerializable` property has been added to identify if a component type is valid in a chunk that is intended to be serialized. If `SerializeUtility.SerializeWorld` (such as might be called while exporting a subscene) is used to serialize chunks that contain components whose `TypeIndex.IsChunkSerializable` returns false, an exception will be thrown telling you why the component type is inappropriate for serialization.\n* Added `WeakSceneReference Unload(Scene scene)` method to unload the scene instance and release its resources.\n* Added guidance to GetSingleton error message\n* Transform Usage Flags\n* Added support for managed (shared) components serialization in DOTS runtime.\n\n### Changed\n\n* Moved the tool for adding missing `partial` keywords to system and job types from Edit &gt; Preferences &gt; Entities into a Roslyn codefix. Your IDE of choice should now be able to fix this for you, and give you a red squiggly line if it's missing.\n* IJobEntity no longer gives a compile error if you have a reference type field. This improves iteration time, and has the added benefit that you can now write managed code in an IJobEntity. Simply add a managed component to your IJE's Execute (that forces running without the jobsystem). Your job can now validly use that field. If you try to schedule this job rather than running it on the main thread, you'll correctly get thrown a runtime error for having a reference type in your job.\n* Improved performance of IJobEntity generator, speeding up compile times. Attributes like WithAll, WithAny etc. now use syntax information directly. This mean that you can't make your own attribute on an IJobEntity named `WithAll` `WithAny`, `WithNone`, `WithDisabled`, `WithAbsent`, `WithOptions`, or `WithChangeFilter`.\n* Updated Burst dependency version to 1.8.3.\n* What was PostTransformScale as a float3x3 is now PostTransformMatrix as a float4x4. This is more general and offers maximum flexibility. You can, for example, use it to scale from a secondary pivot.\n* ParentSystem removes the Parent component if said component points to an entity that doesn't exist anymore.\n* Refactored how additive scenes are handled within the Runtime Content Manager. A scene is now returned, and that is used as the key to unload. This change required some API changes.\n* Changed `WeakObjectSceneReference.LoadAsync` to return the Scene instance, which should be used to check the loading status and for unloading.\n* Changed `RuntimeContentManager.UnloadScene` method to take the Scene instance as the only parameter.\n* The BlobAssetStore used during baking now uses garbage collection instead of an explicit refcount. It is not required anymore to register blobs with authoring GameObjects nor to do explicit cleanup in incremental baking systems.\n* Source generators for Systems and Aspects no longer default to outputting generated files in `Temp/GeneratedCode/***`. To turn it on, add `DOTS_OUTPUT_SOURCEGEN_FILES` to your Scripting Defines in Player Settings. Turning it on will cost compilation time. (The source generator for IJobEntity already made this change earlier.)\n* Moved InternalCompilerInterface, EntityQueryEnumerator (now InternalEntityQueryEnumerator) and some other types and methods to the Unity.Entities.Internal namespace.  These types and methods are not intended for use by user code. We would make them internal, but source generators won't work correctly that way unfortunately.\n\n### Deprecated\n\n* Deprecated `WeakSceneReference` Release method. Unload should now be used and the scene instance returned by LoadAsync needs to be passed in as a ref.\n* `RegisterBindingAttribute(Type runtimeComponent, string runtimeField, bool generated)`. Vector type fields can now be registered automatically without the `generated` option.\n* SceneSystem.UnloadParameters and the overload of SceneSystem.UnloadScene receiving SceneSystem.UnloadParameters as parameters.\n* `EntityQuery.SetEnabledBitsOnAllChunks` as the only bulk operation on EntityQuery instead of EntityManager. Use the newly added bulk `SetComponentEnabled` overloads instead.\n* WeakSceneReference properties LoadingStatus, SceneResult, SceneFileResult.\n* RuntimeContentManager methods GetSceneLoadingStatus, GetSceneFileValue, GetSceneValue\n\n### Removed\n\n* `ENABLE_TRANSFORM_V1` define and existing transform v1 code. Transform v2 is now the only transform system.\n* Tooling to re-write user files to add missing partial keywords to systems.\n* The `TransformAspect` struct was removed. Recent changes to the Entities transform systems made the current implementation of `TransformAspect` much less useful, and we've decided to remove it from the package until we can provide a more valuable abstraction over the DOTS transform components.\n* The `EntityQueryEnumerator.EntityCount` field has been removed from the public API. Note that `EntityQueryEnumerator` is only intended for use by DOTS source generators.\n* `BlobAssetComputationContext` made internal.\n\n### Fixed\n\n* Baker IEntitiesPlayerSettings were not setup correctly if the com.unity.platforms package was not installed/present in the project.\n* IJobEntity now no longer caches the default query when scheduling with a dynamic query. For example. `new MyJob().Schedule();` will use the query matching its execute signature whereas `new MyJob().Schedule(myQuery)` will now only use myQuery. This is useful in cases like RequireMatchingQueriesForUpdate, where you don't want to accidentally create extra queries.\n* Jobs implementing IJobEntity can now be created in one assembly and scheduled in another.\n* The `[WithDisabled]` attribute when applied to a job implementing `IJobEntity` now overrides the implicit `All` query defined by the signature of `Execute`. E.g. `Execute(MyComp a)` and `[WithDisabled(typeof(MyComp))]` now defines a query of EntityQuery(all={}, disabled=MyComp). This is useful in cases where you want to enable all components of type X which are present, but disabled.\n* `WriteGroup` support in transform v2 `LocalToWorldSystem` code should now work correctly.\n* Fixed compilation issue with 23.1/23.2*\n* Detection of circular ordering dependencies between systems is now correct.\n* Chaining `EntityQuery` methods with bulk operation methods is now supported.\n* Docs and samples for ECB systems now accurately reflect recommended usage. Fixed issue during `TypeManager.Initialize` where managed components with a field containing a circular type definition may throw `ArgumentException: An item with the same key has already been added.`\n* Calling Release on a `WeakObjectReference<GameObject>` will no longer log errors in the editor.\n* Zero-sized (\"tag\") enableable components were not always correctly enabled by default, when added to an entire chunk (such as via `EntityManager.AddComponent<EnableableTag>(query)`).\n* Fixed issue with DotsGlobalSettings reporting the incorrect PlayType when switching from DedicatedServer to another standalone build target.\n* Fixed TypeManager initialization causing a crash in the Entities Hierarchy.\n* If you schedule an `IJobEntity` instance with a custom query that doesn't contain the components required for the `Execute()` method to run, a readable and actionable runtime exception is now thrown when safety checks are enabled.\n* `EntityCommandBuffer.Dispose()` can no longer trigger a stack overflow when disposing large command buffers.\n* Throw a readable, actionable compile-time error informing users that `RefRO<T>`, `RefRW<T>`, `EnabledRefRO<T>`,  `EnabledRefRW<T>`, `DynamicBuffer<T>` and `UnityEngineComponent<T>` may not be used with generic types.\n* A `foreach` iterating over an `EntityQuery` with enableable components now iterates over the correct entities.\n* Re-added obsolete baker functions\n* The accidental exposure of package internals to \"Assembly-CSharp\" was reverted.\n* Default the build system to use the client settings if the package com.unity.netcode is not installed when the active  platform is dedicated server.\n* `Entities.WithStructuralChanges().ForEach()` now correctly handles enableable components.\n* Allow components to contain nested native containers. Previously the TypeManager would throw during initialization if a component contained a a nested NativeContainer field. Note: NativeContainers still cannot be verified to be safely accessed when used in jobs. So, if a component contains a nested NativeContainer field, that component can only be accessed from the main thread.\n* Entities Hierarchy correctly selects the subscenes\n* Invalid entity warning in Inspector window with runtime data mode is only applied to entities or game objects that can be converted to entities.\n* Issue with IJobEntity source-generators not getting re-run in IDE. This could cause Rider and Visual Studio to not be able to find/debug generated code for IJobEntity types.\n* Adding managed components to entities via an `EntityCommandBuffer` on the main thread no longer triggers the `NullReferenceException`.\n* Fixed an issue where entities with enableable components loaded from a subscene could reference the wrong component's enabled/disabled state.\n* Fixed an issue where idiomatic foreach (IFE) would not iterate over all entities that matched its query, if the query contains enableable components\n* Issue where recompilation would retrigger baking unnecessarily."
  },
  "upmCi": {
    "footprint": "dbd41304b0875066ab1bd93922a0cb3b17fc2b7c"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.entities@1.0/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
    "type": "git",
    "revision": "85530c484ef7afedc5b128081152ec5e1f6f30e2"
  }
}
