{
  "name": "com.unity.entities",
  "displayName": "Entities",
  "version": "1.0.0-pre.44",
  "unity": "2022.2",
  "unityRelease": "2f1",
  "dependencies": {
    "com.unity.burst": "1.8.2",
    "com.unity.serialization": "3.0.0-pre.1",
    "com.unity.collections": "2.1.0-pre.11",
    "com.unity.mathematics": "1.2.6",
    "com.unity.modules.assetbundle": "1.0.0",
    "com.unity.modules.audio": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.nuget.mono-cecil": "1.11.4",
    "com.unity.scriptablebuildpipeline": "1.20.2",
    "com.unity.profiling.core": "1.0.2"
  },
  "description": "The Entities package provides a modern Entity Component System (ECS) implementation with a basic set of systems and components made for Unity.",
  "keywords": [
    "entities",
    "dots",
    "unity"
  ],
  "_upm": {
    "changelog": "### Added\n\n* Added `RegisterBindingAttribute(string authoringField, Type runtimeComponent, string runtimeField)` to provide better control when registering nested types in authoring components.\n* RuntimeContentSystem.LoadContentCatalog allows for starting the content delivery and update process when ENABLE_CONTENT_DELIVERY is defined.   The automatic update is no longer triggered when the applications starts.\n* Streaming samples.\n* RemoteContentCatalogBuildUtility.BuildContent helper method added to allow building player content without having to rebuild the player.  This is needed in order for developers to create their own publishing workflow for remote content delivery.\n* Added missing SceneSystem.UnloadScene prototype.\n* Generic IJobEntity jobs are not yet supported.  Added a proper error to indicate this instead of a compiler error.\n* SceneSystem.UnloadScene(WorldUnmanaged world, Entity sceneEntity, bool fullyUnload)\n* `ManagedAPI.GetComponentTypeHandle` now let's you get a typehandle to `Class IComponentData`.\n* Baking systems from the excluded baking assemblies are also filtered out during baking.\n* Two new categories of component types can be provided when creating an `EntityQuery`. Components in the `Disabled` list must be present on matching entities, but must be disabled. `Components in the `Absent` list must not be on the entity at all.\n* Companion objects need to always instantiate since the content manager reuses loaded objects.\n* A new WorldSystemFilterFlags called Streaming to identify all the systems involved in streaming.\n* Add AlwaysIncludeBakingSystem internal attribute to run baking systems from excluded baking assemblies\n* WorldSystemFilter to the runtime version of ResolveSceneReferenceSystem.\n* DependsOnLightBaking can be called from bakers to register a dependency against light mapping data.\n* Added support for managed (shared) components serialization in DOTS runtime.\n* debug only check to prevent disposal of blob assets managed by a blob asset store.\n\n### Changed\n\n* `ComponentTypeHandle` and `BufferTypeHandle` now more consistently use their cache of per-archetype metadata to accelerate common operations like `.Has<T>()`, `.DidChange<T>()` and `.GetNativeArray<T>()`.\n* `ComponentLookup` and `BufferLookup` now more consistently use their cache of per-archetype metadata to accelerate common operations like `.HasComponent<T>()`, `.IsComponentEnabled<T>()` and `.SetComponentEnabled<T>()`.\n* Upgraded to use Roslyn 4.0.1\n* Added better support for vector type fields in `BindingRegistry`.\n* Unmanaged shared components are serialized as blittable data.\n* `ISystem` now doesn't need `BurstCompile` on the struct. Thus bursting a system simply means to put BurstCompile on either `OnCreate`, `OnStartRunning`, `OnUpdate`, `OnStopRunning`, or `OnDestroy`.\n* The \"a system could not be added to group\" error message now contains the name of the World affected for easier debugging\n* Nested native containers are protected against in any type attributed with [NativeContainer]\n* Unmanaged shared components are no longer boxed when collecting BlobAssetReferences.\n* EditorEntityScenes.GetSubScenes was made public in order to gather subscenes to pass to the BuildContent API.\n* `EntityManager.GetAllUniqueSharedComponents` now takes an `AllocatorManager.AllocatorHandle` instead of an `Allocator` enum parameter allowing for custom allocators to be used when allocating the `NativeList<T>` return value. `Allocator` implicitly converts to `AllocatorManager.AllocatorHandle` so no action is required to call the changed API.\n* IJobEntity refactored to IncrementalGenerator.\n* IJobEntity now doesn't default to outputting generated files in `Temp/GeneratedCode/***`. To turn it on use `DOTS_OUTPUT_SOURCEGEN_FILES`. Turning it on will cost Compilation Time.\n* Replaced .Name with .FullName for duplicated component message in baking.\n* Removed `IIsFullyUnmanaged` due to obtrusiveness when compilation fails. Instead gives runtime error when incorrectly scheduling managed IJobEntity.\n* ManagedComponents and Shared Managed Components can now be Scheduled in IJobEntity (ScheduleParallel still not allowed. Runtime error will be thrown if you try.)\n* Invalid entities now show their index and version when viewed in the inspector\n* In Bakers AddTransformUsageFlags now takes an entity instead of a GameObject or a Component.\n* Baking log output to be more succinct.\n* In cases where there are no attributes constraining the order of system creation, updating, and destruction, the order will have changed to enable optimizations. If you have mysterious bugs after this update, check for missing [CreateAfter], [CreateBefore], [UpdateAfter], and [UpdateBefore] attributes.\n\n### Deprecated\n\n* Deprecated `RegisterBindingAttribute(Type runtimeComponent, string runtimeField, bool generated)`. Vector type fields can now be registered automatically without the `generated` option.\n* SceneSystem.UnloadParameters and SceneSystem.UnloadScene receiving SceneSystem.UnloadParameters as parameters.\n\n### Removed\n\n* SourceGen no longer outputs .cs files in `Temp/GeneratedCode` by default, because most IDEs such as Rider and Visual Studio support SourceGen output. If you want to emit the output (at the cost of significant compilation time), use the `DOTS_OUTPUT_SOURCEGEN_FILES` define.\n* From Unity Editor version 2022.2 and later, the **Auto Generate** mode in the Lighting window is unavailable with the Entities package. This is because when you generate lighting in a project, the Unity Editor opens all loaded subscenes, which might slow down Editor performance. On demand baking is still available and is the recommended way of generating lighting.\n* Tooling to re-write user files to add missing partial keywords to systems.\n\n### Fixed\n\n* A selection issue with keyboard arrow keys in Entities Hierarchy window.\n* GetComponent on Transform triggers now a rebake when the gameobject is reparented.\n* Removed unnecessary test assemblies from always being loaded in projects.\n* In DOTS Runtime, shared components containing managed references could generate incorrect results when calling `TypeManager.Equals` and/or `TypeManager.GetHashCode`. We also now reinforce that all shared components containing managed references must implement `IEquatable<>`\n* Using `EnabledRefRO<T>` and `EnabledRefRW<T>` parameters in `IJobEntity.Execute()` with zero-sized enableable components is now supported.\n* The transform system no longer increments the change version of `WorldTransform` and `LocalToWorld` on all world-space entities every frame. This prevents entity hierarchies from being processed redundantly, even if their root entity had not moved since the last update.\n* Fixes lightmaps for player builds\n* Creating multiple additional entities in a baker now scales linearly\n* Fixed the behavior of EntityRemapUtility.HasEntityReferencesManaged for types where Entity or BlobAsset reference fields are succeeded by two or more strings.\n* Setting a shared component to its default value using an EntityCommandBuffer could cause the default value to be duplicated and this would prevent query filtering from working correctly.\n* Using `EnabledRefXX<T>` and `RefXX<T>` wrappers on the same component in the same `IJobEntity.Execute()` method no longer throws compiler errors.\n* It is now possible to force reimport a single or multiple subscenes from the inspector when the last import of the subscene failed.\n* Fix SubScene issue with File -> Save As when having a SubScene as the Active Scene.\n* `EntityQueryEnumerator.MoveNextEntityRange()` now consistently returns the correct `entityCount` value.\n* IJobEntity compile error when using an aspect's lookup type as field.\n* Invalid subscene nodes issues in Entities Hierarchy window.\n* Some `EntityManager` methods (including `RemoveComponent()` were not calling their Burst-compiled implementations.\n* Badly formatted error messages when they are emitted while in burst-compiled code.\n* Performance issue in Entities Hierarchy when opening large subscenes.\n* An `EntityCommandBuffer` containing references to managed components will no longer throw an exception if it is disposed from a Burst-compiled context.\n* Errors for DynamicSharedComponentTypeHandle were reporting as DynamicComponentTypeHandle\n* Entities Hierarchy reset properly after test runner execution.\n* Fixed a small memory leak that would occur when calling `EntityManager.GetAllUniqueSharedComponents` with an `unmanaged` component `T` type.\n* Improve subscene handling in Entities Hierarchy\n* Stack overflow in source generators when IComponentData has a cycle.\n* Fix a NullReferenceException happening in the BakingFilterSettings when an assembly definition added in the excluded list of baking assemblies is missing.\n* First cross reference to section 0 being lost.\n* Fix missing subscene sections to load and unload from the subscene inspector.\n* Aspect generator cache flush. Nested aspects no longer cause compilation error when their fields are changed.\n* Added implicit dependency on transform hierarchy for transform bakers.\n* Section 0 unloading is delayed until all the other sections are unloaded.\n* Loading scene sections with `BlockOnStreamIn` failed if section 0 wasn't loaded first.\n* Components window's list view item height is fixed to the correct value.\n* IJobEntityChunkBeginEnd now doesn't update change version if `shouldExecuteChunk` is false.\n* The detection of duplicate components during baking was failing between different baking passes.\n* Issue with types used in codegen not being found if there if they exist in a more namespace name that aliases with a more immediate namespace name.\n* The following `ArchetypeChunk` methods may now be invoked on zero-sized components without triggering any exception: `GetNativeArray<T>(ref ComponentTypeHandle<T> typeHandle)`, `GetComponentDataPtrRO<T>(ref ComponentTypeHandle<T> typeHandle)`, `GetComponentDataPtrRW<T>(ref ComponentTypeHandle<T> typeHandle)`, `GetRequiredComponentDataPtrRO<T>(ref ComponentTypeHandle<T> typeHandle)`, and `GetRequiredComponentDataPtrRW<T>(ref ComponentTypeHandle<T> typeHandle)`.\n* Companion components with RequireComponent attributes used to potentially throw an exception during baking when a subset of those components was disabled. (e.g. this was the case with Lights)\n* When multiple blob assets are recreated during baking and happen to recycle the same addresses and same hashes (but not the same hash for the same address), it would confuse the differ that patches the main ECS world with the results of live baking. This problematic configuration has been identified and fixed.\n* Dependency.Complete() not working in systems' OnStartRunning and OnStopRunning\n* Removed redundant dependency on the first transform of the hierarchy in baking.\n* Crash when building a Dedicated Server and Netcode package not present.\n* ComponentSystemGroup.SortSystems() taking many milliseconds for large number of systems.\n* Fixed some spacing issues in the Entity inspector.\n* `EntityManager.RemoveComponent(Entity, ComponentTypeSet)` and `EntityCommandBuffer.RemoveComponent(Entity, ComponentTypeSet)` no longer throw an exception if the target entity is invalid, for consistency with other RemoveComponent functions.\n* Entities Hierarchy: Potential crash caused by race condition when gathering the changes to update the Entities Hierarchy.\n* Entities Hierarchy potential crash when receiving GameObjects' OrderChanged events out of order.\n* entities structural changes profiler module should no longer cause memory corruption (and crash) when recording from jobs using exclusive entity transactions.\n* The number for buffer count in Entity Inspector is not cut anymore.\n* Primary entity is secured to be the first to show in the Preview window.\n* Potentially incorrect remapping of references when using BlobBuilder to create large blobs. This would lead to corrupted blob data in rare cases."
  },
  "upmCi": {
    "footprint": "78b6d48e9038545ba8130556d463109f29190c5a"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.entities@1.0/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
    "type": "git",
    "revision": "0e572178431e16c09c6c434c873bf0c60e52a5e9"
  }
}
