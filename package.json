{
  "name": "com.unity.entities",
  "displayName": "Entities",
  "version": "1.1.0-pre.3",
  "unity": "2022.3",
  "unityRelease": "0f1",
  "dependencies": {
    "com.unity.burst": "1.8.8",
    "com.unity.serialization": "3.1.1",
    "com.unity.collections": "2.3.0-pre.3",
    "com.unity.mathematics": "1.2.6",
    "com.unity.modules.assetbundle": "1.0.0",
    "com.unity.modules.audio": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.test-framework.performance": "3.0.2",
    "com.unity.nuget.mono-cecil": "1.11.4",
    "com.unity.scriptablebuildpipeline": "1.20.2",
    "com.unity.profiling.core": "1.0.2"
  },
  "description": "The Entities package provides a modern Entity Component System (ECS) implementation with a basic set of systems and components made for Unity.",
  "keywords": [
    "entities",
    "dots",
    "unity"
  ],
  "_upm": {
    "changelog": "### Added\n\n* We have added `ReadOnlySpan` variants for `CreateEntity` and  `CreateArchetype` which means you can now create the two with burst. E.g. `EntityManager.CreateEntity( stackalloc[] { ComponentType.ReadOnly<Type1>(), ... } )`.\n\n### Fixed\n\n* Iterating through a generic type using `System.Query` now triggers an actionable error message informing users that doing so is unsupported.\n* Nested `SystemAPI` invocations that previously trigger the `InvalidOperationException` no longer do so.\n* `#if` directives surrounding `using` directives are now correctly handled during source generation.\n* Source-generators now correctly patch methods that contain pointer parameters.\n* Disabled components that are also used as changed filters are now backed by correctly generated queries.\n* The `World` is now validated in the `EntityContainer` before the `EntityManager` is accessed. Meaning you can now exit playmode while having an Entity with a buffer selected in the Entities Hierarchy, without getting any errors.\n* Avoid a potential `NullReferenceException` when creating an `EntityQuery` with multiple query descriptions.\n* The component dependency manager now completes registered jobs in batches, instead of individually. This reduces the overhead of structural changes and other sync points.\n* Managed component types with circular references to other managed types (e.g. TypeA contains a field of TypeB, and TypeB contains a field of TypeA.) previously could have non-deterministic StableTypeHashes causing issues when deserializing entities data. Note, this fix raises the serialization version for all `.entities` files, requiring all previously serialized entity data requiring to be reserialized as the StableTypeHashes generated will no longer match. **Fix requires Unity 2022.3.1f11 or greater to work properly in IL2CPP builds**\n* Fixed several memory leaks in the package and its test suite.\n* `ScratchpadAllocator.Dispose()` now fully restores the object to its uninitialized state.\n* `EntityCommandBuffer` no longer leaks `DynamicBuffers` when using `PlaybackPolicy.Multiplayback`.\n* `EntityCommandBuffer.Dispose()` no longer throws an exception when called on a command buffer that was not fully initialized.\n* `World.DestroyAllSystemsAndLogException()` (called during `World.Dispose()`) no longer prematurely aborts its loop if a system threw an exception from its `OnDestroy()` method. This prevented all subsequent systems from being destroyed, leaking all of their resources.\n* Scheduling `IJobEntity` instances using `IJobEntityExtensions` no longer triggers `SGICE002`.\n* When selecting `Publish -> Content Update` in a project that uses the `Entities` package, the `DirectoryNotFoundException` is no longer thrown."
  },
  "upmCi": {
    "footprint": "3b0fe1ba91a2e5c06c60e6e8fa8190134c6ef9a1"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.entities@1.1/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/dots.git",
    "type": "git",
    "revision": "5edeb315aa3ca0d26060290a69660b2afdabe2ff"
  }
}
